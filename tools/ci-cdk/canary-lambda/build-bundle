#!/usr/bin/env python3
#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
#

# Generates a Cargo.toml with the given AWS SDK version for this canary

import argparse
import hashlib
import os
import shlex
import subprocess
import sys
import zipfile

BASE_MANIFEST = """
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
#
# IMPORTANT: Don't edit this file directly! Run `build-bundle` to modify this file instead.
[package]
name = "aws-sdk-rust-lambda-canary"
version = "0.1.0"
edition = "2018"
license = "Apache-2.0"

# Emit an empty workspace so that the canary can successfully build when
# built from the aws-sdk-rust repo, which has a workspace in it.
[workspace]

[[bin]]
name = "bootstrap"
path = "src/main.rs"

[dependencies]
anyhow = "1"
async-stream = "0.3"
bytes = "1"
hound = "3.4"
async-trait = "0.1"
lambda_runtime = "0.4"
serde_json = "1"
thiserror = "1"
tokio = { version = "1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["fmt", "env-filter"] }
uuid = { version = "0.8", features = ["v4"] }
tokio-stream = "0"
tracing-texray = "0.1.1"
"""

notable_versions = [
    # first version to add support for paginators
    "0.4.1"
]


def main():
    args = Args()
    script_path = os.path.dirname(os.path.realpath(__file__))
    repository_root = get_cmd_output("git rev-parse --show-toplevel", cwd=script_path)[1]

    with open("Cargo.toml", "w") as file:
        print(BASE_MANIFEST, file=file)
        print(format_dependency("aws-config", args.sdk_path, args.sdk_version), file=file)
        print(format_dependency("aws-sdk-s3", args.sdk_path, args.sdk_version), file=file)
        print(format_dependency("aws-sdk-ec2", args.sdk_path, args.sdk_version), file=file)
        print(format_dependency("aws-sdk-transcribestreaming", args.sdk_path, args.sdk_version), file=file)
        print("[features]", file=file)
        for version in notable_versions:
            print(f'"v{version}" = []', file=file)
        enabled = ', '.join(enabled_versions(args.sdk_version))
        print(f'default = [{enabled}]', file=file)

    if args.manifest_only:
        sys.exit(0)

    target_arg = "--target=x86_64-unknown-linux-musl" if args.musl else ""
    run(f"cargo build --release {target_arg}", cwd=script_path)

    target_path = f"{repository_root}/tools/target/x86_64-unknown-linux-musl/release" \
        if args.musl else f"{repository_root}/tools/target/release"
    bin_hash = sha1_file(f"{target_path}/bootstrap")
    bundle_path = f"{target_path}/canary-lambda-{bin_hash}.zip"

    with zipfile.ZipFile(bundle_path, 'w') as zip:
        zip.write(f"{target_path}/bootstrap", arcname="bootstrap", compress_type=zipfile.ZIP_DEFLATED, compresslevel=5)

    print(bundle_path)


def sha1_file(path):
    hasher = hashlib.sha1()
    with open(path, 'rb') as file:
        contents = file.read()
        hasher.update(contents)
    return hasher.hexdigest()


def enabled_versions(sdk_version):
    if sdk_version is None:
        return [f'"v{version}"' for version in notable_versions]
    else:
        return [f'"v{version}"' for version in notable_versions if version.split('.') <= sdk_version.split('.')]


def format_dependency(crate, path, version):
    if path is None:
        return f'{crate} = "{version}"'
    else:
        crate_path = crate
        if crate_path.startswith("aws-sdk-"):
            crate_path = crate_path[(len("aws-sdk-")):]
        if version is None:
            return f'{crate} = {{ path = "{path}/{crate_path}" }}'
        else:
            return f'{crate} = {{ path = "{path}/{crate_path}", version = "{version}" }}'


def run(command, cwd=None):
    subprocess.run(shlex.split(command), stdout=sys.stderr, stderr=sys.stderr, cwd=cwd, check=True)


# Returns (status, output) from a shell command
def get_cmd_output(command, cwd=None, check=True):
    result = subprocess.run(
        shlex.split(command),
        capture_output=True,
        check=check,
        cwd=cwd
    )
    return (result.returncode, result.stdout.decode("utf-8").strip())


class Args:
    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument(
            "--sdk-path",
            dest="sdk_path",
            type=str,
            help="Path to the generated AWS Rust SDK"
        )
        parser.add_argument(
            "--sdk-version",
            dest="sdk_version",
            type=str,
            help="AWS Rust SDK version"
        )
        parser.add_argument(
            "--musl",
            dest="musl",
            action="store_true",
            help="Whether target MUSL instead of GLIBC"
        )
        parser.add_argument(
            "--manifest-only",
            dest="manifest_only",
            action="store_true",
            help="Only generate the Cargo.toml but don't build"
        )

        args = parser.parse_args()
        self.sdk_path = args.sdk_path
        self.sdk_version = args.sdk_version
        self.musl = args.musl
        self.manifest_only = args.manifest_only
        if self.sdk_path is None and self.sdk_version is None:
            print("Either of sdk-path or sdk-version are required")
            sys.exit(1)


if __name__ == "__main__":
    main()
